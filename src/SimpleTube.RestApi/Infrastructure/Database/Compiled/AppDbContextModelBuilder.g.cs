// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Update.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SimpleTube.RestApi.Infrastructure.Database.Compiled
{
    public partial class AppDbContextModel
    {
        private AppDbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("c3a557f2-dfe9-4356-850d-ba88052e1aca"), entityTypeCount: 1)
        {
        }

        partial void Initialize()
        {
            var channelEntity = ChannelEntityEntityType.Create(this);

            ChannelEntityEntityType.CreateAnnotations(channelEntity);

            AddAnnotation("ProductVersion", "9.0.5");
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var channelEntity = FindEntityType("SimpleTube.RestApi.Infrastructure.Database.Entities.ChannelEntity")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            channelEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase = new TableBase("SimpleTube.RestApi.Infrastructure.Database.Entities.ChannelEntity", null, relationalModel);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var handleColumnBase = new ColumnBase<ColumnMappingBase>("Handle", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase.Columns.Add("Handle", handleColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase.Columns.Add("Id", idColumnBase);
            var lastModifiedAtColumnBase = new ColumnBase<ColumnMappingBase>("LastModifiedAt", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase.Columns.Add("LastModifiedAt", lastModifiedAtColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase.Columns.Add("Name", nameColumnBase);
            var thumbnailColumnBase = new ColumnBase<ColumnMappingBase>("Thumbnail", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase.Columns.Add("Thumbnail", thumbnailColumnBase);
            relationalModel.DefaultTables.Add("SimpleTube.RestApi.Infrastructure.Database.Entities.ChannelEntity", simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase);
            var simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityMappingBase = new TableMappingBase<ColumnMappingBase>(channelEntity, simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase, null);
            simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityTableBase.AddTypeMapping(simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityMappingBase, false);
            defaultTableMappings.Add(simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, channelEntity.FindProperty("Id")!, simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, channelEntity.FindProperty("CreatedAt")!, simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)handleColumnBase, channelEntity.FindProperty("Handle")!, simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastModifiedAtColumnBase, channelEntity.FindProperty("LastModifiedAt")!, simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, channelEntity.FindProperty("Name")!, simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)thumbnailColumnBase, channelEntity.FindProperty("Thumbnail")!, simpleTubeRestApiInfrastructureDatabaseEntitiesChannelEntityMappingBase);

            var tableMappings = new List<TableMapping>();
            channelEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var channelsTable = new Table("Channels", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", channelsTable);
            channelsTable.Columns.Add("Id", idColumn);
            idColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(idColumn);
            var createdAtColumn = new Column("CreatedAt", "TEXT", channelsTable);
            channelsTable.Columns.Add("CreatedAt", createdAtColumn);
            createdAtColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(createdAtColumn);
            var handleColumn = new Column("Handle", "TEXT", channelsTable);
            channelsTable.Columns.Add("Handle", handleColumn);
            handleColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(handleColumn);
            var lastModifiedAtColumn = new Column("LastModifiedAt", "TEXT", channelsTable);
            channelsTable.Columns.Add("LastModifiedAt", lastModifiedAtColumn);
            lastModifiedAtColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(lastModifiedAtColumn);
            var nameColumn = new Column("Name", "TEXT", channelsTable);
            channelsTable.Columns.Add("Name", nameColumn);
            nameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(nameColumn);
            var thumbnailColumn = new Column("Thumbnail", "TEXT", channelsTable);
            channelsTable.Columns.Add("Thumbnail", thumbnailColumn);
            thumbnailColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(thumbnailColumn);
            relationalModel.Tables.Add(("Channels", null), channelsTable);
            var channelsTableMapping = new TableMapping(channelEntity, channelsTable, null);
            channelsTable.AddTypeMapping(channelsTableMapping, false);
            tableMappings.Add(channelsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, channelEntity.FindProperty("Id")!, channelsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, channelEntity.FindProperty("CreatedAt")!, channelsTableMapping);
            RelationalModel.CreateColumnMapping(handleColumn, channelEntity.FindProperty("Handle")!, channelsTableMapping);
            RelationalModel.CreateColumnMapping(lastModifiedAtColumn, channelEntity.FindProperty("LastModifiedAt")!, channelsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, channelEntity.FindProperty("Name")!, channelsTableMapping);
            RelationalModel.CreateColumnMapping(thumbnailColumn, channelEntity.FindProperty("Thumbnail")!, channelsTableMapping);
            var pK_Channels = new UniqueConstraint("PK_Channels", channelsTable, new[] { idColumn });
            channelsTable.PrimaryKey = pK_Channels;
            pK_Channels.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<string>(pK_Channels));
            var pK_ChannelsKey = RelationalModel.GetKey(this,
                "SimpleTube.RestApi.Infrastructure.Database.Entities.ChannelEntity",
                new[] { "Id" });
            pK_Channels.MappedKeys.Add(pK_ChannelsKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ChannelsKey).Add(pK_Channels);
            channelsTable.UniqueConstraints.Add("PK_Channels", pK_Channels);
            return relationalModel.MakeReadOnly();
        }
    }
}
