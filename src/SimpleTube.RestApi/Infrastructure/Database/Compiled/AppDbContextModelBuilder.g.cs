// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Update.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SimpleTube.RestApi.Infrastructure.Database.Compiled
{
    public partial class AppDbContextModel
    {
        private AppDbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("525e836d-6ecc-4e3b-a439-01022cec8322"), entityTypeCount: 1)
        {
        }

        partial void Initialize()
        {
            var subscriptionEntity = SubscriptionEntityEntityType.Create(this);

            SubscriptionEntityEntityType.CreateAnnotations(subscriptionEntity);

            AddAnnotation("ProductVersion", "9.0.5");
            AddRuntimeAnnotation("Relational:RelationalModelFactory", () => CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var subscriptionEntity = FindEntityType("SimpleTube.RestApi.Infrastructure.Database.Entities.SubscriptionEntity")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            subscriptionEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase = new TableBase("SimpleTube.RestApi.Infrastructure.Database.Entities.SubscriptionEntity", null, relationalModel);
            var channelHandleColumnBase = new ColumnBase<ColumnMappingBase>("ChannelHandle", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase.Columns.Add("ChannelHandle", channelHandleColumnBase);
            var channelIdColumnBase = new ColumnBase<ColumnMappingBase>("ChannelId", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase.Columns.Add("ChannelId", channelIdColumnBase);
            var channelNameColumnBase = new ColumnBase<ColumnMappingBase>("ChannelName", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase.Columns.Add("ChannelName", channelNameColumnBase);
            var channelThumbnailColumnBase = new ColumnBase<ColumnMappingBase>("ChannelThumbnail", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase.Columns.Add("ChannelThumbnail", channelThumbnailColumnBase);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var lastModifiedAtColumnBase = new ColumnBase<ColumnMappingBase>("LastModifiedAt", "TEXT", simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase);
            simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase.Columns.Add("LastModifiedAt", lastModifiedAtColumnBase);
            relationalModel.DefaultTables.Add("SimpleTube.RestApi.Infrastructure.Database.Entities.SubscriptionEntity", simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase);
            var simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityMappingBase = new TableMappingBase<ColumnMappingBase>(subscriptionEntity, simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase, null);
            simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityTableBase.AddTypeMapping(simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityMappingBase, false);
            defaultTableMappings.Add(simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase, subscriptionEntity.FindProperty("ChannelId")!, simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelHandleColumnBase, subscriptionEntity.FindProperty("ChannelHandle")!, simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelNameColumnBase, subscriptionEntity.FindProperty("ChannelName")!, simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelThumbnailColumnBase, subscriptionEntity.FindProperty("ChannelThumbnail")!, simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, subscriptionEntity.FindProperty("CreatedAt")!, simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastModifiedAtColumnBase, subscriptionEntity.FindProperty("LastModifiedAt")!, simpleTubeRestApiInfrastructureDatabaseEntitiesSubscriptionEntityMappingBase);

            var tableMappings = new List<TableMapping>();
            subscriptionEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var subscriptionsTable = new Table("Subscriptions", null, relationalModel);
            var channelIdColumn = new Column("ChannelId", "TEXT", subscriptionsTable);
            subscriptionsTable.Columns.Add("ChannelId", channelIdColumn);
            channelIdColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(channelIdColumn);
            var channelHandleColumn = new Column("ChannelHandle", "TEXT", subscriptionsTable);
            subscriptionsTable.Columns.Add("ChannelHandle", channelHandleColumn);
            channelHandleColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(channelHandleColumn);
            var channelNameColumn = new Column("ChannelName", "TEXT", subscriptionsTable);
            subscriptionsTable.Columns.Add("ChannelName", channelNameColumn);
            channelNameColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(channelNameColumn);
            var channelThumbnailColumn = new Column("ChannelThumbnail", "TEXT", subscriptionsTable);
            subscriptionsTable.Columns.Add("ChannelThumbnail", channelThumbnailColumn);
            channelThumbnailColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<string>(channelThumbnailColumn);
            var createdAtColumn = new Column("CreatedAt", "TEXT", subscriptionsTable);
            subscriptionsTable.Columns.Add("CreatedAt", createdAtColumn);
            createdAtColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(createdAtColumn);
            var lastModifiedAtColumn = new Column("LastModifiedAt", "TEXT", subscriptionsTable);
            subscriptionsTable.Columns.Add("LastModifiedAt", lastModifiedAtColumn);
            lastModifiedAtColumn.Accessors = ColumnAccessorsFactory.CreateGeneric<DateTimeOffset>(lastModifiedAtColumn);
            relationalModel.Tables.Add(("Subscriptions", null), subscriptionsTable);
            var subscriptionsTableMapping = new TableMapping(subscriptionEntity, subscriptionsTable, null);
            subscriptionsTable.AddTypeMapping(subscriptionsTableMapping, false);
            tableMappings.Add(subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn, subscriptionEntity.FindProperty("ChannelId")!, subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(channelHandleColumn, subscriptionEntity.FindProperty("ChannelHandle")!, subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(channelNameColumn, subscriptionEntity.FindProperty("ChannelName")!, subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(channelThumbnailColumn, subscriptionEntity.FindProperty("ChannelThumbnail")!, subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, subscriptionEntity.FindProperty("CreatedAt")!, subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(lastModifiedAtColumn, subscriptionEntity.FindProperty("LastModifiedAt")!, subscriptionsTableMapping);
            var pK_Subscriptions = new UniqueConstraint("PK_Subscriptions", subscriptionsTable, new[] { channelIdColumn });
            subscriptionsTable.PrimaryKey = pK_Subscriptions;
            pK_Subscriptions.SetRowKeyValueFactory(new SimpleRowKeyValueFactory<string>(pK_Subscriptions));
            var pK_SubscriptionsKey = RelationalModel.GetKey(this,
                "SimpleTube.RestApi.Infrastructure.Database.Entities.SubscriptionEntity",
                new[] { "ChannelId" });
            pK_Subscriptions.MappedKeys.Add(pK_SubscriptionsKey);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SubscriptionsKey).Add(pK_Subscriptions);
            subscriptionsTable.UniqueConstraints.Add("PK_Subscriptions", pK_Subscriptions);
            return relationalModel.MakeReadOnly();
        }
    }
}
