// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using SimpleTube.RestApi.Infrastructure.Database.Entities;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SimpleTube.RestApi.Infrastructure.Database.Compiled
{
    [EntityFrameworkInternal]
    public partial class VideoEntityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "SimpleTube.RestApi.Infrastructure.Database.Entities.VideoEntity",
                typeof(VideoEntity),
                baseEntityType,
                propertyCount: 8,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(string),
                propertyInfo: typeof(VideoEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VideoEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetGetter(
                string (VideoEntity entity) => VideoEntityUnsafeAccessors.Id(entity),
                bool (VideoEntity entity) => VideoEntityUnsafeAccessors.Id(entity) == null,
                string (VideoEntity instance) => VideoEntityUnsafeAccessors.Id(instance),
                bool (VideoEntity instance) => VideoEntityUnsafeAccessors.Id(instance) == null);
            id.SetSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Id(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Id(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(id, 0),
                string (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = SqliteStringTypeMapping.Default;
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(id));

            var channelId = runtimeEntityType.AddProperty(
                "ChannelId",
                typeof(string),
                propertyInfo: typeof(VideoEntity).GetProperty("ChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VideoEntity).GetField("<ChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            channelId.SetGetter(
                string (VideoEntity entity) => VideoEntityUnsafeAccessors.ChannelId(entity),
                bool (VideoEntity entity) => VideoEntityUnsafeAccessors.ChannelId(entity) == null,
                string (VideoEntity instance) => VideoEntityUnsafeAccessors.ChannelId(instance),
                bool (VideoEntity instance) => VideoEntityUnsafeAccessors.ChannelId(instance) == null);
            channelId.SetSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetMaterializationSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetAccessors(
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.ChannelId(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.ChannelId(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(channelId, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(channelId),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            channelId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            channelId.TypeMapping = SqliteStringTypeMapping.Default;

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(VideoEntity).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VideoEntity).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            description.SetGetter(
                string (VideoEntity entity) => VideoEntityUnsafeAccessors.Description(entity),
                bool (VideoEntity entity) => VideoEntityUnsafeAccessors.Description(entity) == null,
                string (VideoEntity instance) => VideoEntityUnsafeAccessors.Description(instance),
                bool (VideoEntity instance) => VideoEntityUnsafeAccessors.Description(instance) == null);
            description.SetSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.Description(entity) = value);
            description.SetMaterializationSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.Description(entity) = value);
            description.SetAccessors(
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Description(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Description(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(description, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(description),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            description.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            description.TypeMapping = SqliteStringTypeMapping.Default;

            var duration = runtimeEntityType.AddProperty(
                "Duration",
                typeof(TimeSpan),
                propertyInfo: typeof(VideoEntity).GetProperty("Duration", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VideoEntity).GetField("<Duration>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new TimeSpan(0, 0, 0, 0, 0));
            duration.SetGetter(
                TimeSpan (VideoEntity entity) => VideoEntityUnsafeAccessors.Duration(entity),
                bool (VideoEntity entity) => VideoEntityUnsafeAccessors.Duration(entity) == default(TimeSpan),
                TimeSpan (VideoEntity instance) => VideoEntityUnsafeAccessors.Duration(instance),
                bool (VideoEntity instance) => VideoEntityUnsafeAccessors.Duration(instance) == default(TimeSpan));
            duration.SetSetter(
                (VideoEntity entity, TimeSpan value) => VideoEntityUnsafeAccessors.Duration(entity) = value);
            duration.SetMaterializationSetter(
                (VideoEntity entity, TimeSpan value) => VideoEntityUnsafeAccessors.Duration(entity) = value);
            duration.SetAccessors(
                TimeSpan (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Duration(((VideoEntity)(entry.Entity))),
                TimeSpan (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Duration(((VideoEntity)(entry.Entity))),
                TimeSpan (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeSpan>(duration, 3),
                TimeSpan (InternalEntityEntry entry) => entry.GetCurrentValue<TimeSpan>(duration),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            duration.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            duration.TypeMapping = TimeSpanTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeSpan>(
                    bool (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    int (TimeSpan v) => ((object)v).GetHashCode(),
                    TimeSpan (TimeSpan v) => v),
                keyComparer: new ValueComparer<TimeSpan>(
                    bool (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    int (TimeSpan v) => ((object)v).GetHashCode(),
                    TimeSpan (TimeSpan v) => v),
                providerValueComparer: new ValueComparer<TimeSpan>(
                    bool (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    int (TimeSpan v) => ((object)v).GetHashCode(),
                    TimeSpan (TimeSpan v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "TEXT"));

            var eTag = runtimeEntityType.AddProperty(
                "ETag",
                typeof(string),
                propertyInfo: typeof(VideoEntity).GetProperty("ETag", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VideoEntity).GetField("<ETag>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            eTag.SetGetter(
                string (VideoEntity entity) => VideoEntityUnsafeAccessors.ETag(entity),
                bool (VideoEntity entity) => VideoEntityUnsafeAccessors.ETag(entity) == null,
                string (VideoEntity instance) => VideoEntityUnsafeAccessors.ETag(instance),
                bool (VideoEntity instance) => VideoEntityUnsafeAccessors.ETag(instance) == null);
            eTag.SetSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.ETag(entity) = value);
            eTag.SetMaterializationSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.ETag(entity) = value);
            eTag.SetAccessors(
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.ETag(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.ETag(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(eTag, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(eTag),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            eTag.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            eTag.TypeMapping = SqliteStringTypeMapping.Default;

            var publishedAt = runtimeEntityType.AddProperty(
                "PublishedAt",
                typeof(DateTime),
                propertyInfo: typeof(VideoEntity).GetProperty("PublishedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VideoEntity).GetField("<PublishedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            publishedAt.SetGetter(
                DateTime (VideoEntity entity) => VideoEntityUnsafeAccessors.PublishedAt(entity),
                bool (VideoEntity entity) => VideoEntityUnsafeAccessors.PublishedAt(entity) == default(DateTime),
                DateTime (VideoEntity instance) => VideoEntityUnsafeAccessors.PublishedAt(instance),
                bool (VideoEntity instance) => VideoEntityUnsafeAccessors.PublishedAt(instance) == default(DateTime));
            publishedAt.SetSetter(
                (VideoEntity entity, DateTime value) => VideoEntityUnsafeAccessors.PublishedAt(entity) = value);
            publishedAt.SetMaterializationSetter(
                (VideoEntity entity, DateTime value) => VideoEntityUnsafeAccessors.PublishedAt(entity) = value);
            publishedAt.SetAccessors(
                DateTime (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.PublishedAt(((VideoEntity)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.PublishedAt(((VideoEntity)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(publishedAt, 5),
                DateTime (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(publishedAt),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            publishedAt.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            publishedAt.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var thumbnail = runtimeEntityType.AddProperty(
                "Thumbnail",
                typeof(string),
                propertyInfo: typeof(VideoEntity).GetProperty("Thumbnail", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VideoEntity).GetField("<Thumbnail>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            thumbnail.SetGetter(
                string (VideoEntity entity) => VideoEntityUnsafeAccessors.Thumbnail(entity),
                bool (VideoEntity entity) => VideoEntityUnsafeAccessors.Thumbnail(entity) == null,
                string (VideoEntity instance) => VideoEntityUnsafeAccessors.Thumbnail(instance),
                bool (VideoEntity instance) => VideoEntityUnsafeAccessors.Thumbnail(instance) == null);
            thumbnail.SetSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.Thumbnail(entity) = value);
            thumbnail.SetMaterializationSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.Thumbnail(entity) = value);
            thumbnail.SetAccessors(
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Thumbnail(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Thumbnail(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(thumbnail, 6),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(thumbnail),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            thumbnail.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            thumbnail.TypeMapping = SqliteStringTypeMapping.Default;

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(VideoEntity).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(VideoEntity).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            title.SetGetter(
                string (VideoEntity entity) => VideoEntityUnsafeAccessors.Title(entity),
                bool (VideoEntity entity) => VideoEntityUnsafeAccessors.Title(entity) == null,
                string (VideoEntity instance) => VideoEntityUnsafeAccessors.Title(instance),
                bool (VideoEntity instance) => VideoEntityUnsafeAccessors.Title(instance) == null);
            title.SetSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.Title(entity) = value);
            title.SetMaterializationSetter(
                (VideoEntity entity, string value) => VideoEntityUnsafeAccessors.Title(entity) = value);
            title.SetAccessors(
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Title(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => VideoEntityUnsafeAccessors.Title(((VideoEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(title, 7),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(title),
                object (ValueBuffer valueBuffer) => valueBuffer[7]);
            title.SetPropertyIndexes(
                index: 7,
                originalValueIndex: 7,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            title.TypeMapping = SqliteStringTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var channelId = runtimeEntityType.FindProperty("ChannelId");
            var description = runtimeEntityType.FindProperty("Description");
            var duration = runtimeEntityType.FindProperty("Duration");
            var eTag = runtimeEntityType.FindProperty("ETag");
            var publishedAt = runtimeEntityType.FindProperty("PublishedAt");
            var thumbnail = runtimeEntityType.FindProperty("Thumbnail");
            var title = runtimeEntityType.FindProperty("Title");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNullableFactory<string, int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<string>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((VideoEntity)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string, string, string, TimeSpan, string, DateTime, string, string>((source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(id))), (source.GetCurrentValue<string>(channelId) == null ? null : ((ValueComparer<string>)(((IProperty)channelId).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(channelId))), (source.GetCurrentValue<string>(description) == null ? null : ((ValueComparer<string>)(((IProperty)description).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(description))), ((ValueComparer<TimeSpan>)(((IProperty)duration).GetValueComparer())).Snapshot(source.GetCurrentValue<TimeSpan>(duration)), (source.GetCurrentValue<string>(eTag) == null ? null : ((ValueComparer<string>)(((IProperty)eTag).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(eTag))), ((ValueComparer<DateTime>)(((IProperty)publishedAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTime>(publishedAt)), (source.GetCurrentValue<string>(thumbnail) == null ? null : ((ValueComparer<string>)(((IProperty)thumbnail).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(thumbnail))), (source.GetCurrentValue<string>(title) == null ? null : ((ValueComparer<string>)(((IProperty)title).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(title))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((VideoEntity)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string>((source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<string>(id))))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 8,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 8,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Videos");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
