// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using SimpleTube.RestApi.Infrastructure.Database.Entities;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SimpleTube.RestApi.Infrastructure.Database.Compiled
{
    [EntityFrameworkInternal]
    public partial class ChannelEntityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "SimpleTube.RestApi.Infrastructure.Database.Entities.ChannelEntity",
                typeof(ChannelEntity),
                baseEntityType,
                propertyCount: 7,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(string),
                propertyInfo: typeof(ChannelEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetGetter(
                string (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Id(entity),
                bool (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Id(entity) == null,
                string (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Id(instance),
                bool (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Id(instance) == null);
            id.SetSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Id(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Id(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(id, 0),
                string (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = SqliteStringTypeMapping.Default;
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(id));

            var banner = runtimeEntityType.AddProperty(
                "Banner",
                typeof(string),
                propertyInfo: typeof(ChannelEntity).GetProperty("Banner", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelEntity).GetField("<Banner>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            banner.SetGetter(
                string (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Banner(entity),
                bool (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Banner(entity) == null,
                string (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Banner(instance),
                bool (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Banner(instance) == null);
            banner.SetSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Banner(entity) = value);
            banner.SetMaterializationSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Banner(entity) = value);
            banner.SetAccessors(
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Banner(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Banner(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(banner, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(banner),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            banner.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            banner.TypeMapping = SqliteStringTypeMapping.Default;

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTimeOffset),
                propertyInfo: typeof(AuditableEntity).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditableEntity).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            createdAt.SetGetter(
                DateTimeOffset (ChannelEntity entity) => AuditableEntityUnsafeAccessors.CreatedAt(entity),
                bool (ChannelEntity entity) => AuditableEntityUnsafeAccessors.CreatedAt(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (ChannelEntity instance) => AuditableEntityUnsafeAccessors.CreatedAt(instance),
                bool (ChannelEntity instance) => AuditableEntityUnsafeAccessors.CreatedAt(instance).EqualsExact(default(DateTimeOffset)));
            createdAt.SetSetter(
                (ChannelEntity entity, DateTimeOffset value) => AuditableEntityUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetMaterializationSetter(
                (ChannelEntity entity, DateTimeOffset value) => AuditableEntityUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => AuditableEntityUnsafeAccessors.CreatedAt(((ChannelEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => AuditableEntityUnsafeAccessors.CreatedAt(((ChannelEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(createdAt, 2),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(createdAt),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            createdAt.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            createdAt.TypeMapping = SqliteDateTimeOffsetTypeMapping.Default;

            var handle = runtimeEntityType.AddProperty(
                "Handle",
                typeof(string),
                propertyInfo: typeof(ChannelEntity).GetProperty("Handle", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelEntity).GetField("<Handle>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            handle.SetGetter(
                string (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Handle(entity),
                bool (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Handle(entity) == null,
                string (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Handle(instance),
                bool (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Handle(instance) == null);
            handle.SetSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Handle(entity) = value);
            handle.SetMaterializationSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Handle(entity) = value);
            handle.SetAccessors(
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Handle(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Handle(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(handle, 3),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(handle),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            handle.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            handle.TypeMapping = SqliteStringTypeMapping.Default;

            var lastModifiedAt = runtimeEntityType.AddProperty(
                "LastModifiedAt",
                typeof(DateTimeOffset),
                propertyInfo: typeof(AuditableEntity).GetProperty("LastModifiedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditableEntity).GetField("<LastModifiedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            lastModifiedAt.SetGetter(
                DateTimeOffset (ChannelEntity entity) => AuditableEntityUnsafeAccessors.LastModifiedAt(entity),
                bool (ChannelEntity entity) => AuditableEntityUnsafeAccessors.LastModifiedAt(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (ChannelEntity instance) => AuditableEntityUnsafeAccessors.LastModifiedAt(instance),
                bool (ChannelEntity instance) => AuditableEntityUnsafeAccessors.LastModifiedAt(instance).EqualsExact(default(DateTimeOffset)));
            lastModifiedAt.SetSetter(
                (ChannelEntity entity, DateTimeOffset value) => AuditableEntityUnsafeAccessors.LastModifiedAt(entity) = value);
            lastModifiedAt.SetMaterializationSetter(
                (ChannelEntity entity, DateTimeOffset value) => AuditableEntityUnsafeAccessors.LastModifiedAt(entity) = value);
            lastModifiedAt.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => AuditableEntityUnsafeAccessors.LastModifiedAt(((ChannelEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => AuditableEntityUnsafeAccessors.LastModifiedAt(((ChannelEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(lastModifiedAt, 4),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(lastModifiedAt),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            lastModifiedAt.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            lastModifiedAt.TypeMapping = SqliteDateTimeOffsetTypeMapping.Default;

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(ChannelEntity).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelEntity).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            name.SetGetter(
                string (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Name(entity),
                bool (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Name(entity) == null,
                string (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Name(instance),
                bool (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Name(instance) == null);
            name.SetSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Name(entity) = value);
            name.SetMaterializationSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Name(entity) = value);
            name.SetAccessors(
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Name(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Name(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(name, 5),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(name),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            name.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            name.TypeMapping = SqliteStringTypeMapping.Default;

            var thumbnail = runtimeEntityType.AddProperty(
                "Thumbnail",
                typeof(string),
                propertyInfo: typeof(ChannelEntity).GetProperty("Thumbnail", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelEntity).GetField("<Thumbnail>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            thumbnail.SetGetter(
                string (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Thumbnail(entity),
                bool (ChannelEntity entity) => ChannelEntityUnsafeAccessors.Thumbnail(entity) == null,
                string (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Thumbnail(instance),
                bool (ChannelEntity instance) => ChannelEntityUnsafeAccessors.Thumbnail(instance) == null);
            thumbnail.SetSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Thumbnail(entity) = value);
            thumbnail.SetMaterializationSetter(
                (ChannelEntity entity, string value) => ChannelEntityUnsafeAccessors.Thumbnail(entity) = value);
            thumbnail.SetAccessors(
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Thumbnail(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => ChannelEntityUnsafeAccessors.Thumbnail(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(thumbnail, 6),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(thumbnail),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            thumbnail.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            thumbnail.TypeMapping = SqliteStringTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var banner = runtimeEntityType.FindProperty("Banner");
            var createdAt = runtimeEntityType.FindProperty("CreatedAt");
            var handle = runtimeEntityType.FindProperty("Handle");
            var lastModifiedAt = runtimeEntityType.FindProperty("LastModifiedAt");
            var name = runtimeEntityType.FindProperty("Name");
            var thumbnail = runtimeEntityType.FindProperty("Thumbnail");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNullableFactory<string, int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<string>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ChannelEntity)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string, string, DateTimeOffset, string, DateTimeOffset, string, string>((source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(id))), (source.GetCurrentValue<string>(banner) == null ? null : ((ValueComparer<string>)(((IProperty)banner).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(banner))), ((ValueComparer<DateTimeOffset>)(((IProperty)createdAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(createdAt)), (source.GetCurrentValue<string>(handle) == null ? null : ((ValueComparer<string>)(((IProperty)handle).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(handle))), ((ValueComparer<DateTimeOffset>)(((IProperty)lastModifiedAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(lastModifiedAt)), (source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)(((IProperty)name).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(name))), (source.GetCurrentValue<string>(thumbnail) == null ? null : ((ValueComparer<string>)(((IProperty)thumbnail).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(thumbnail))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ChannelEntity)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string>((source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<string>(id))))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 7,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 7,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Channels");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
