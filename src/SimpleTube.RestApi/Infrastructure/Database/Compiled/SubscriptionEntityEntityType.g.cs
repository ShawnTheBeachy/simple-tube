// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using SimpleTube.RestApi.Infrastructure.Database.Entities;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SimpleTube.RestApi.Infrastructure.Database.Compiled
{
    [EntityFrameworkInternal]
    public partial class SubscriptionEntityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "SimpleTube.RestApi.Infrastructure.Database.Entities.SubscriptionEntity",
                typeof(ChannelEntity),
                baseEntityType,
                propertyCount: 6,
                keyCount: 1);

            var channelId = runtimeEntityType.AddProperty(
                "ChannelId",
                typeof(string),
                propertyInfo: typeof(ChannelEntity).GetProperty("ChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelEntity).GetField("<ChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            channelId.SetGetter(
                string (ChannelEntity entity) => SubscriptionEntityUnsafeAccessors.ChannelId(entity),
                bool (ChannelEntity entity) => SubscriptionEntityUnsafeAccessors.ChannelId(entity) == null,
                string (ChannelEntity instance) => SubscriptionEntityUnsafeAccessors.ChannelId(instance),
                bool (ChannelEntity instance) => SubscriptionEntityUnsafeAccessors.ChannelId(instance) == null);
            channelId.SetSetter(
                (ChannelEntity entity, string value) => SubscriptionEntityUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetMaterializationSetter(
                (ChannelEntity entity, string value) => SubscriptionEntityUnsafeAccessors.ChannelId(entity) = value);
            channelId.SetAccessors(
                string (InternalEntityEntry entry) => SubscriptionEntityUnsafeAccessors.ChannelId(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => SubscriptionEntityUnsafeAccessors.ChannelId(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(channelId, 0),
                string (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(channelId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            channelId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            channelId.TypeMapping = SqliteStringTypeMapping.Default;
            channelId.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(channelId));

            var channelHandle = runtimeEntityType.AddProperty(
                "ChannelHandle",
                typeof(string),
                propertyInfo: typeof(ChannelEntity).GetProperty("ChannelHandle", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelEntity).GetField("<ChannelHandle>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            channelHandle.SetGetter(
                string (ChannelEntity entity) => SubscriptionEntityUnsafeAccessors.ChannelHandle(entity),
                bool (ChannelEntity entity) => SubscriptionEntityUnsafeAccessors.ChannelHandle(entity) == null,
                string (ChannelEntity instance) => SubscriptionEntityUnsafeAccessors.ChannelHandle(instance),
                bool (ChannelEntity instance) => SubscriptionEntityUnsafeAccessors.ChannelHandle(instance) == null);
            channelHandle.SetSetter(
                (ChannelEntity entity, string value) => SubscriptionEntityUnsafeAccessors.ChannelHandle(entity) = value);
            channelHandle.SetMaterializationSetter(
                (ChannelEntity entity, string value) => SubscriptionEntityUnsafeAccessors.ChannelHandle(entity) = value);
            channelHandle.SetAccessors(
                string (InternalEntityEntry entry) => SubscriptionEntityUnsafeAccessors.ChannelHandle(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => SubscriptionEntityUnsafeAccessors.ChannelHandle(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(channelHandle, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(channelHandle),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            channelHandle.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            channelHandle.TypeMapping = SqliteStringTypeMapping.Default;

            var channelName = runtimeEntityType.AddProperty(
                "ChannelName",
                typeof(string),
                propertyInfo: typeof(ChannelEntity).GetProperty("ChannelName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelEntity).GetField("<ChannelName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            channelName.SetGetter(
                string (ChannelEntity entity) => SubscriptionEntityUnsafeAccessors.ChannelName(entity),
                bool (ChannelEntity entity) => SubscriptionEntityUnsafeAccessors.ChannelName(entity) == null,
                string (ChannelEntity instance) => SubscriptionEntityUnsafeAccessors.ChannelName(instance),
                bool (ChannelEntity instance) => SubscriptionEntityUnsafeAccessors.ChannelName(instance) == null);
            channelName.SetSetter(
                (ChannelEntity entity, string value) => SubscriptionEntityUnsafeAccessors.ChannelName(entity) = value);
            channelName.SetMaterializationSetter(
                (ChannelEntity entity, string value) => SubscriptionEntityUnsafeAccessors.ChannelName(entity) = value);
            channelName.SetAccessors(
                string (InternalEntityEntry entry) => SubscriptionEntityUnsafeAccessors.ChannelName(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => SubscriptionEntityUnsafeAccessors.ChannelName(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(channelName, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(channelName),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            channelName.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            channelName.TypeMapping = SqliteStringTypeMapping.Default;

            var channelThumbnail = runtimeEntityType.AddProperty(
                "ChannelThumbnail",
                typeof(string),
                propertyInfo: typeof(ChannelEntity).GetProperty("ChannelThumbnail", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelEntity).GetField("<ChannelThumbnail>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            channelThumbnail.SetGetter(
                string (ChannelEntity entity) => SubscriptionEntityUnsafeAccessors.ChannelThumbnail(entity),
                bool (ChannelEntity entity) => SubscriptionEntityUnsafeAccessors.ChannelThumbnail(entity) == null,
                string (ChannelEntity instance) => SubscriptionEntityUnsafeAccessors.ChannelThumbnail(instance),
                bool (ChannelEntity instance) => SubscriptionEntityUnsafeAccessors.ChannelThumbnail(instance) == null);
            channelThumbnail.SetSetter(
                (ChannelEntity entity, string value) => SubscriptionEntityUnsafeAccessors.ChannelThumbnail(entity) = value);
            channelThumbnail.SetMaterializationSetter(
                (ChannelEntity entity, string value) => SubscriptionEntityUnsafeAccessors.ChannelThumbnail(entity) = value);
            channelThumbnail.SetAccessors(
                string (InternalEntityEntry entry) => SubscriptionEntityUnsafeAccessors.ChannelThumbnail(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => SubscriptionEntityUnsafeAccessors.ChannelThumbnail(((ChannelEntity)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(channelThumbnail, 3),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(channelThumbnail),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            channelThumbnail.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            channelThumbnail.TypeMapping = SqliteStringTypeMapping.Default;

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTimeOffset),
                propertyInfo: typeof(AuditableEntity).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditableEntity).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            createdAt.SetGetter(
                DateTimeOffset (ChannelEntity entity) => AuditableEntityUnsafeAccessors.CreatedAt(entity),
                bool (ChannelEntity entity) => AuditableEntityUnsafeAccessors.CreatedAt(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (ChannelEntity instance) => AuditableEntityUnsafeAccessors.CreatedAt(instance),
                bool (ChannelEntity instance) => AuditableEntityUnsafeAccessors.CreatedAt(instance).EqualsExact(default(DateTimeOffset)));
            createdAt.SetSetter(
                (ChannelEntity entity, DateTimeOffset value) => AuditableEntityUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetMaterializationSetter(
                (ChannelEntity entity, DateTimeOffset value) => AuditableEntityUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => AuditableEntityUnsafeAccessors.CreatedAt(((ChannelEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => AuditableEntityUnsafeAccessors.CreatedAt(((ChannelEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(createdAt, 4),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(createdAt),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            createdAt.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            createdAt.TypeMapping = SqliteDateTimeOffsetTypeMapping.Default;

            var lastModifiedAt = runtimeEntityType.AddProperty(
                "LastModifiedAt",
                typeof(DateTimeOffset),
                propertyInfo: typeof(AuditableEntity).GetProperty("LastModifiedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(AuditableEntity).GetField("<LastModifiedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));
            lastModifiedAt.SetGetter(
                DateTimeOffset (ChannelEntity entity) => AuditableEntityUnsafeAccessors.LastModifiedAt(entity),
                bool (ChannelEntity entity) => AuditableEntityUnsafeAccessors.LastModifiedAt(entity).EqualsExact(default(DateTimeOffset)),
                DateTimeOffset (ChannelEntity instance) => AuditableEntityUnsafeAccessors.LastModifiedAt(instance),
                bool (ChannelEntity instance) => AuditableEntityUnsafeAccessors.LastModifiedAt(instance).EqualsExact(default(DateTimeOffset)));
            lastModifiedAt.SetSetter(
                (ChannelEntity entity, DateTimeOffset value) => AuditableEntityUnsafeAccessors.LastModifiedAt(entity) = value);
            lastModifiedAt.SetMaterializationSetter(
                (ChannelEntity entity, DateTimeOffset value) => AuditableEntityUnsafeAccessors.LastModifiedAt(entity) = value);
            lastModifiedAt.SetAccessors(
                DateTimeOffset (InternalEntityEntry entry) => AuditableEntityUnsafeAccessors.LastModifiedAt(((ChannelEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => AuditableEntityUnsafeAccessors.LastModifiedAt(((ChannelEntity)(entry.Entity))),
                DateTimeOffset (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(lastModifiedAt, 5),
                DateTimeOffset (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(lastModifiedAt),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            lastModifiedAt.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            lastModifiedAt.TypeMapping = SqliteDateTimeOffsetTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { channelId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var channelId = runtimeEntityType.FindProperty("ChannelId");
            var channelHandle = runtimeEntityType.FindProperty("ChannelHandle");
            var channelName = runtimeEntityType.FindProperty("ChannelName");
            var channelThumbnail = runtimeEntityType.FindProperty("ChannelThumbnail");
            var createdAt = runtimeEntityType.FindProperty("CreatedAt");
            var lastModifiedAt = runtimeEntityType.FindProperty("LastModifiedAt");
            var key = runtimeEntityType.FindKey(new[] { channelId });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNullableFactory<string, int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<string>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ChannelEntity)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string, string, string, string, DateTimeOffset, DateTimeOffset>((source.GetCurrentValue<string>(channelId) == null ? null : ((ValueComparer<string>)(((IProperty)channelId).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(channelId))), (source.GetCurrentValue<string>(channelHandle) == null ? null : ((ValueComparer<string>)(((IProperty)channelHandle).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(channelHandle))), (source.GetCurrentValue<string>(channelName) == null ? null : ((ValueComparer<string>)(((IProperty)channelName).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(channelName))), (source.GetCurrentValue<string>(channelThumbnail) == null ? null : ((ValueComparer<string>)(((IProperty)channelThumbnail).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(channelThumbnail))), ((ValueComparer<DateTimeOffset>)(((IProperty)createdAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(createdAt)), ((ValueComparer<DateTimeOffset>)(((IProperty)lastModifiedAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTimeOffset>(lastModifiedAt)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((ChannelEntity)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string>((source.GetCurrentValue<string>(channelId) == null ? null : ((ValueComparer<string>)(((IProperty)channelId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<string>(channelId))))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 6,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 6,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Subscriptions");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
